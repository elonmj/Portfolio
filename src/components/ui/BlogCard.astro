---
export interface Props {
  title: string;
  description: string;
  pubDate: Date;
  image?: string;
  tags: string[];
  category: string;
  readTime?: number;
  href: string;
  featured?: boolean;
}

const { title, description, pubDate, image, tags, category, readTime, href, featured = false } = Astro.props;

const formattedDate = pubDate.toLocaleDateString('fr-FR', {
  year: 'numeric',
  month: 'short',
  day: 'numeric'
});
---

<article class={`group card hover:shadow-xl hover:-translate-y-1 transition-all duration-300 overflow-hidden ${featured ? 'md:col-span-2' : ''}`}>
  <a href={href} class="block">
    <!-- Image -->
    {image && (
      <div class="relative aspect-video overflow-hidden">
        <img 
          src={image} 
          alt={title}
          class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
          loading="lazy"
        />
        
        <!-- Overlay with metadata -->
        <div class="absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/60 to-transparent p-4">
          <div class="flex items-center justify-between text-white text-sm">
            <div class="flex items-center space-x-4">
              <time datetime={pubDate.toISOString()}>
                {formattedDate}
              </time>
              {readTime && (
                <span class="flex items-center space-x-1">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>{readTime} min</span>
                </span>
              )}
            </div>
            
            <span class="px-2 py-1 bg-blue-600 rounded-full text-xs font-medium">
              {category}
            </span>
          </div>
        </div>
      </div>
    )}
    
    <!-- Content -->
    <div class="p-6">
      <h2 class={`font-bold text-gray-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors ${featured ? 'text-2xl md:text-3xl' : 'text-xl'}`}>
        {title}
      </h2>
      
      <p class={`text-gray-600 dark:text-gray-300 mb-4 line-clamp-3 ${featured ? 'text-lg' : ''}`}>
        {description}
      </p>
      
      <!-- Tags -->
      {tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-4">
          {tags.slice(0, 3).map((tag) => (
            <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md text-xs font-medium">
              #{tag}
            </span>
          ))}
          {tags.length > 3 && (
            <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md text-xs font-medium">
              +{tags.length - 3}
            </span>
          )}
        </div>
      )}
      
      <!-- Read more link -->
      <div class="flex items-center text-blue-600 dark:text-blue-400 font-medium">
        <span>Lire l'article</span>
        <svg class="w-4 h-4 ml-2 transition-transform duration-200 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </div>
    </div>
  </a>
</article>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
